name: 'CI workflow'
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'dev/**'      
env:
  IMAGE_NAME: image
  FILES_IMAGE_NAME: cortex-argocd-myapps-sample3-frontend

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read Service-Scorecard file
        id: get-service-scorecard
        run: echo "::set-output name=service_scorecard::$(cat ./FrontendApplication/dist/Service-Scorecard.txt)"

      - name: Extract the commit sha
        id: get-commit-sha
        run: | 
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          echo "COMMIT_SHA: $COMMIT_SHA"
          echo "::set-output name=commit_sha::$COMMIT_SHA"

      - name: Modify DisplayBanner.txt
        uses: jaywcjlove/github-action-modify-file-content@main
        with:
          path: FrontendApplication/dist/DisplayBanner.txt
          body: "Container Image updated with Githuf ref# ${{ steps.get-commit-sha.outputs.commit_sha }} on {{date:YYYY-MM-DD HH:mm:ss}}"
          message: "Auto-Update the message in DisplayBanner.txt"
          overwrite: 'true'
          sync_local_file: 'true'
                
      - name: git config user.email
        run: git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: git config user.name
        run: git config --global user.name "github-actions[bot]"
      - name: check for changes
        run: git status
      - name: stage changed files
        run: git add .
      - name: commit changed files
        run: git commit -m "Auto updating TODO.txt"
      - name: fetch from master
        run: git fetch origin main
      - name: push code to master
        run: git push origin HEAD:main

      - name: Build app image
        run: |
          git pull origin main
          docker build ./FrontendApplication -f ./FrontendApplication/app.dockerfile --tag image --tag latest      
        
      - name: Log into Docker Hub Registry
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
        
      - name: Push app image
        id: image
        run: |
          IMAGE_ID=${{ secrets.DOCKER_HUB_USERNAME }}/$FILES_IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME
          echo "Taging the image:$IMAGE_NAME with tag $IMAGE_ID:$VERSION"
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          echo "Taging the image:$IMAGE_NAME with tag $IMAGE_ID:latest"
          docker tag image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
          echo "::set-output name=image_id::$IMAGE_ID"
          echo "::set-output name=version::$VERSION"
      
      - name: Update Image Version in the argocd app config yaml file
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'dev/frontend-deployment.yaml'
          branch: main
          targetBranch: main
          message: "Update Image Version to ${{ steps.image.outputs.version }}"
          changes: |
            {
              "$.spec.template.spec.containers[:1].image":"${{ steps.image.outputs.image_id }}:${{ steps.image.outputs.version }}",
              "$.spec.template.metadata.labels['app.kubernetes.io/name']":"${{ steps.get-service-scorecard.outputs.service_scorecard }}"
            }
